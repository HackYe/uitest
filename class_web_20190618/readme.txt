PO模式

测试用例 = 页面对象 + 测试数据

测试用例与测试对象分离。分层设计

测试对象层（PageObjects）：元素定位发生了变化？页面功能变化或者新增？ 都不影响测试用例，只要暴露的函数名没变就行
测试用例层（TestCases）：用例步骤\用例数据\测试数据  发生变化，都不影响测试对象

容易维护，容易扩展

写web用例原则：
1.稳定性是最重要的，可以牺牲时间来提高稳定性
2.用例要保持独立性。不依赖于其他的用例运行结果。
3.如果用例流程很长，可以拆成几个用例，它就不独立了
    比如申请人-->审核1-->审核2-->审核3
4.尽量少的依赖环境数据（在任何环境下，都自给自足，自己创建条件）

层级关系
PageLocators（元素定位层）  -->  PageObjects（页面对象层）
PageObjects（页面对象层）   -->  TestCases（测试用例层）
TestDatas（测试数据层）     -->  TestCases（测试用例层）

初衷和目的：解放双手，解放时间，提高反馈效果
应用场景：冒烟-（正常场景，不一定要有断言）
        回归-（全面覆盖）

编写顺序：先写pageobjects，然后再写testcases
